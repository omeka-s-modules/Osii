<?php

namespace DoctrineProxies\__CG__\Osii\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class OsiiMedia extends \Osii\Entity\OsiiMedia implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'osiiItem', 'localMedia', 'snapshotMedia', 'remoteMediaId', 'created', 'modified'];
        }

        return ['__isInitialized__', 'id', 'osiiItem', 'localMedia', 'snapshotMedia', 'remoteMediaId', 'created', 'modified'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (OsiiMedia $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setOsiiItem(\Osii\Entity\OsiiItem $osiiItem): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOsiiItem', [$osiiItem]);

        parent::setOsiiItem($osiiItem);
    }

    /**
     * {@inheritDoc}
     */
    public function getOsiiItem(): \Osii\Entity\OsiiItem
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOsiiItem', []);

        return parent::getOsiiItem();
    }

    /**
     * {@inheritDoc}
     */
    public function setLocalMedia(?\Omeka\Entity\Media $localMedia): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLocalMedia', [$localMedia]);

        parent::setLocalMedia($localMedia);
    }

    /**
     * {@inheritDoc}
     */
    public function getLocalMedia(): ?\Omeka\Entity\Media
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLocalMedia', []);

        return parent::getLocalMedia();
    }

    /**
     * {@inheritDoc}
     */
    public function setSnapshotMedia(?array $snapshotMedia): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSnapshotMedia', [$snapshotMedia]);

        parent::setSnapshotMedia($snapshotMedia);
    }

    /**
     * {@inheritDoc}
     */
    public function getSnapshotMedia(): ?array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSnapshotMedia', []);

        return parent::getSnapshotMedia();
    }

    /**
     * {@inheritDoc}
     */
    public function setRemoteMediaId(int $remoteMediaId): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRemoteMediaId', [$remoteMediaId]);

        parent::setRemoteMediaId($remoteMediaId);
    }

    /**
     * {@inheritDoc}
     */
    public function getRemoteMediaId(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRemoteMediaId', []);

        return parent::getRemoteMediaId();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreated(\DateTime $created): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreated', [$created]);

        parent::setCreated($created);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreated(): \DateTime
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreated', []);

        return parent::getCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function setModified(?\DateTime $modified): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setModified', [$modified]);

        parent::setModified($modified);
    }

    /**
     * {@inheritDoc}
     */
    public function getModified(): ?\DateTime
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getModified', []);

        return parent::getModified();
    }

    /**
     * {@inheritDoc}
     */
    public function prePersist(\Doctrine\ORM\Event\LifecycleEventArgs $eventArgs): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'prePersist', [$eventArgs]);

        parent::prePersist($eventArgs);
    }

    /**
     * {@inheritDoc}
     */
    public function getResourceId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getResourceId', []);

        return parent::getResourceId();
    }

}
